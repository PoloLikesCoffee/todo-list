/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/controller.js":
/*!***************************!*\
  !*** ./src/controller.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _project__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./project */ \"./src/project.js\");\n/* harmony import */ var _task__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./task */ \"./src/task.js\");\n\n\n\n//module - interaction \nconst initializeControl = (function () {\n    const local_storage_project_key = 'task.projects';\n    const local_storage_selected_project_id_key = 'task.selectedProjectId';\n    let myProject = [];\n    let selectedProjectId = localStorage.getItem(local_storage_selected_project_id_key);\n\n    //project feature\n    const selectProject = (event) => {\n        if(event.target.tagName.toLowerCase() === 'li') {\n            selectedProjectId = event.target.dataset.listId;\n            saveAndRender();\n        }\n    }\n\n    const deleteProject = (event) => {\n        myProject = myProject.filter(project => project.id !== selectedProjectId);\n        selectedProjectId = null;\n        saveAndRender();\n    }\n\n    const submitProject = (event) => {\n        event.preventDefault();\n        const newProjectInput = document.querySelector('[data-new-project-input]');\n        const projectName = newProjectInput.value;\n        if (projectName == null || projectName === '') return;\n        const project = createProject(projectName);\n        newProjectInput.value = null;\n        myProject.push(project);\n        saveAndRender();\n    }\n\n    const createProject = (name) => {\n        let project = Object.create(_project__WEBPACK_IMPORTED_MODULE_0__.default.prototype);\n        project.id = Date.now().toString();\n        project.name = name;\n        project.tasks = [];\n        return project;\n    }\n\n    const saveProject = () => {\n        localStorage.setItem(local_storage_project_key, JSON.stringify(myProject));\n        localStorage.setItem(local_storage_selected_project_id_key, selectedProjectId);\n    }\n\n    const renderProject = (container) => {\n        myProject.forEach(project => {\n            const projectEl = document.createElement('li');\n            projectEl.dataset.listId = project.id;\n            projectEl.classList.add('project-name');\n            projectEl.innerText = project.name;\n            if (project.id === selectedProjectId) {\n                projectEl.classList.add('active-list');\n            }\n            container.appendChild(projectEl);\n        });\n    }\n\n    //task feature\n    const selectTask = (event) => {\n        //toggle complete\n        if(event.target.dataset.input === 'input') {\n            console.log('Toggle complete!');\n            const selectedProject = myProject.find(project => project.id === selectedProjectId);\n            const selectedTask = selectedProject.tasks.find(task => task.id === event.target.id);\n            // //selectedTask.complete = event.target.checked;\n            selectedTask.toggleComplete();\n            saveProject();\n            renderTaskCount(selectedProject);\n        }\n        //open edit mode\n        if (event.target.parentNode.dataset.editTask === 'edit') {\n            console.log('Open edit mode!');\n            if (event.target.classList.contains('fa-pencil-alt')) {\n                event.target.classList.remove('fa-pencil-alt');\n                event.target.classList.add('fa-times');\n            } else {\n                event.target.classList.remove('fa-times');\n                event.target.classList.add('fa-pencil-alt');\n            }\n            const currentTask = event.target.parentNode.parentNode;\n            const taskName = currentTask.querySelector('p').innerText;\n            const editContainer = currentTask.querySelector('[data-edit-task-container]');\n            editContainer.classList.toggle('hidden');\n            const editInput = editContainer.querySelector('[data-edit-task-input]');\n            editInput.value = taskName;\n            //animation\n            editContainer.classList.add(\"appear\");\n            setTimeout(function() {\n                editContainer.classList.remove(\"appear\");\n            }, 200);\n        }\n        //edit and save modification\n        if (event.target.parentNode.dataset.validateEditTask === 'validate') {\n            console.log(\"Edited!\");\n            const currentTask = event.target.parentNode.parentNode.parentNode;\n            const editContainer = currentTask.querySelector('[data-edit-task-container]');\n            const editInput = editContainer.querySelector('[data-edit-task-input]').value;\n            currentTask.querySelector('p').innerText = editInput;\n            editContainer.classList.toggle('hidden');\n\n            //console.log(event.target.parentNode.parentNode.parentNode.parentNode.querySelector('.fas'));\n            if (event.target.parentNode.parentNode.parentNode.parentNode.querySelector('.fas').classList.contains('fa-times')) {\n                event.target.parentNode.parentNode.parentNode.parentNode.querySelector('.fas').classList.remove('fa-times');\n                event.target.parentNode.parentNode.parentNode.parentNode.querySelector('.fas').classList.add('fa-pencil-alt');\n            } else {\n                event.target.parentNode.parentNode.parentNode.parentNode.querySelector('.fas').classList.remove('fa-pencil-alt');\n                event.target.parentNode.parentNode.parentNode.parentNode.querySelector('.fas').classList.add('fa-times');\n            }\n            \n            //save locally\n            const selectedProject = myProject.find(project => project.id === selectedProjectId);\n            const selectedTask = selectedProject.tasks.find(task => task.id === event.target.parentNode.id);\n            selectedTask.name = editInput;\n            saveProject();\n        }\n        \n    }\n\n    const clearCompleteTask = (event) => {\n        const selectedProjet = myProject.find(project => project.id === selectedProjectId);\n        selectedProjet.tasks = selectedProjet.tasks.filter(task => !task.complete);\n        saveAndRender();\n    }\n\n    const submitTask = (event) => {\n        event.preventDefault();\n        const newTaskInput = document.querySelector('[data-new-task-input]');\n        const taskName = newTaskInput.value;\n        if (taskName == null || taskName === '') return;\n        const task = createTask(taskName);\n        newTaskInput.value = null;\n        const selectedProject = myProject.find(project => project.id === selectedProjectId);\n        selectedProject.tasks.push(task);\n        saveAndRender();\n    }\n\n    const createTask = (name) => {\n        let task = Object.create(_task__WEBPACK_IMPORTED_MODULE_1__.default.prototype);\n        task.id = Date.now().toString();\n        task.name = name;\n        task.complete = false;\n        return task;\n    }\n\n    const renderTaskCount = (selectedElement) => {\n        const incompleteTaskCounter = selectedElement.tasks.filter(task => !task.complete).length;\n        const taskString = incompleteTaskCounter === 1 ? \"task\" : \"tasks\";\n\n        const projectCountEl = document.querySelector('[data-project-counter]');\n        projectCountEl.innerText = `${incompleteTaskCounter} ${taskString} remaining.`;\n        const tooltip = document.querySelector('.counter-container');\n        //animation\n        tooltip.classList.add(\"bubble\");\n        setTimeout(function() {\n            tooltip.classList.remove(\"bubble\");\n        }, 500);\n    }\n\n    const renderTask = (currentProject) => {\n        const tasksContainer = document.querySelector('[data-tasks]');\n        const taskTemplate = document.getElementById('task-template');\n        currentProject.tasks.forEach(task => {\n            const taskElement = document.importNode(taskTemplate.content, true);\n            const checkbox = taskElement.querySelector('input');\n            checkbox.id = task.id;\n            checkbox.checked = task.complete;\n            const label = taskElement.querySelector('label');\n            label.htmlFor = task.id;\n            const p = label.querySelector('p');\n            p.innerText = task.name;\n            //label.append(task.name);\n            const validate = taskElement.querySelector('.validate');\n            validate.id = task.id;\n            tasksContainer.appendChild(taskElement);\n        });\n    }\n\n    //global feature\n    const saveAndRender = () => {\n        saveProject();\n        render();\n    }\n\n    const isEmpty = (elem) => { \n        return document.querySelector(elem).innerHTML.trim() == \"\";\n    }\n\n    const render = () => {\n        const projectList = document.querySelector('[data-projects]');\n        clearElement(projectList);\n        renderProject(projectList);\n\n        const tasksContainer = document.querySelector('[data-tasks]');\n        const projectTitleEl = document.querySelector('[data-project-title]');\n        const selectedProject = myProject.find(project => project.id === selectedProjectId);\n        const projectDisplayContainer = document.querySelector('[data-project-display-container]');\n\n        if(isEmpty('.project-container ul')) {\n            console.log('empty!');\n            projectDisplayContainer.style.display = 'none';\n        } else if (!isEmpty('.project-container ul') && selectedProject == null) {\n            projectDisplayContainer.style.display = 'none';\n        } else {\n\n            projectDisplayContainer.style.display = '';\n            projectTitleEl.innerText = selectedProject.name;\n            renderTaskCount(selectedProject);\n            clearElement(tasksContainer);\n            renderTask(selectedProject);\n            //animation\n            projectDisplayContainer.classList.add(\"animate\");\n            setTimeout(function() {\n                projectDisplayContainer.classList.remove(\"animate\");\n            }, 500);\n        }\n\n        // if (selectedProject == null) {\n        //     projectDisplayContainer.getElementsByClassName.display = 'none';\n        // } else {\n        //     projectDisplayContainer.style.display = '';\n        //     renderTaskCount(selectedProject);\n        //     clearElement(tasksContainer);\n        //     renderTask(selectedProject);\n        // }\n        \n        //console.log(isEmpty('.project-container ul'));\n        \n        //display the tasks of the selected project\n        \n        // if(isEmpty('.project-container ul')) {\n        //     //console.log('empty!');\n        //     projectDisplayContainer.style.display = 'none';\n        // } else {\n        //     //console.log('not empty!');\n        //     projectDisplayContainer.style.display = '';\n        //     //const projectTitleEl = document.querySelector('[data-project-title]');\n        //     const tasksContainer = document.querySelector('[data-tasks]');\n        //     //projectTitleEl.innerText = selectedProject.name;\n        //     renderTaskCount(selectedProject);\n        //     clearElement(tasksContainer);\n        //     renderTask(selectedProject);\n        // }\n\n        // if (selectedProject === undefined && selectedProjectId == null) {\n        //     projectDisplayContainer.style.display = 'none';\n        // } else {\n        //     projectDisplayContainer.style.display = '';\n        //     //const projectTitleEl = document.querySelector('[data-project-title]');\n        //     const tasksContainer = document.querySelector('[data-tasks]');\n        //     //projectTitleEl.innerText = selectedProject.name;\n        //     renderTaskCount(selectedProject);\n        //     clearElement(tasksContainer);\n        //     renderTask(selectedProject);\n        // }\n    }\n\n    const loadStorage = () => {\n        if(!localStorage.getItem(local_storage_project_key)) {\n            localStorage.setItem(local_storage_project_key, JSON.stringify(myProject));\n        } else {\n            myProject = JSON.parse(localStorage.getItem(local_storage_project_key));\n            let tempArray = [];\n            myProject.forEach(objectToConvert => {\n                let convertedObjectToProject = Object.create(_project__WEBPACK_IMPORTED_MODULE_0__.default.prototype);\n                for(const element in objectToConvert) {\n                    convertedObjectToProject[element] = objectToConvert[element];\n                    \n                    //tasks inside each project\n                    if (Array.isArray(objectToConvert[element])) {\n                        let temp = [];\n                        objectToConvert[element].forEach(object => {\n                            let convertedObjectToTask = Object.create(_task__WEBPACK_IMPORTED_MODULE_1__.default.prototype);\n                            for (const el in object) {\n                                convertedObjectToTask[el] = object[el];\n                            }\n                            temp.push(convertedObjectToTask);\n                            return temp;\n                        });\n                        objectToConvert[element].splice(0, objectToConvert[element].length, ...temp);\n                        //objectToConvert[element] = temp;\n                    }\n                }\n                tempArray.push(convertedObjectToProject);\n                return tempArray;\n            });\n            myProject = tempArray;\n        }\n    }\n\n    const clearElement = (element) => {\n        while(element.firstChild) {\n            element.removeChild(element.firstChild);\n        }\n    }\n\n    return {\n        render,\n        submitProject,\n        selectProject,\n        deleteProject,\n        submitTask,\n        selectTask,\n        clearCompleteTask,\n        loadStorage\n    };\n\n})();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (initializeControl);\n\n//# sourceURL=webpack://todo-list/./src/controller.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./layout */ \"./src/layout.js\");\n/* harmony import */ var _controller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./controller */ \"./src/controller.js\");\n\n\n\n_layout__WEBPACK_IMPORTED_MODULE_0__.default.createLayout();\n_controller__WEBPACK_IMPORTED_MODULE_1__.default.loadStorage();\n_controller__WEBPACK_IMPORTED_MODULE_1__.default.render();\n\n//event listeners\n    //project\n    const newProjectForm = document.querySelector('[data-new-project-form]');\n    newProjectForm.addEventListener('submit', _controller__WEBPACK_IMPORTED_MODULE_1__.default.submitProject);\n\n    const projectContainer = document.querySelector('[data-projects]');\n    projectContainer.addEventListener('click', _controller__WEBPACK_IMPORTED_MODULE_1__.default.selectProject);\n\n    const deleteProjectButton = document.querySelector('[data-delete-project-button]');\n    deleteProjectButton.addEventListener('click', _controller__WEBPACK_IMPORTED_MODULE_1__.default.deleteProject);\n\n    //task\n    const newTaskForm = document.querySelector('[data-new-task-form]');\n    newTaskForm.addEventListener('submit', _controller__WEBPACK_IMPORTED_MODULE_1__.default.submitTask);\n\n    const tasksContainer = document.querySelector('[data-tasks]');\n    tasksContainer.addEventListener('click', _controller__WEBPACK_IMPORTED_MODULE_1__.default.selectTask);\n\n    const clearCompleteTaskButton = document.querySelector('[data-clear-complete-tasks-button]');\n    clearCompleteTaskButton.addEventListener('click', _controller__WEBPACK_IMPORTED_MODULE_1__.default.clearCompleteTask);\n\n\n\n//# sourceURL=webpack://todo-list/./src/index.js?");

/***/ }),

/***/ "./src/layout.js":
/*!***********************!*\
  !*** ./src/layout.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./controller */ \"./src/controller.js\");\n\n\n//Module - layout app\nconst initializeDOM = (function () {\n    \n    const createHeader = () => {\n        const header = document.createElement('div');\n        header.innerHTML = `Todo List`;\n        header.classList.add('header');\n\n        return header;\n    }\n\n    const createProjectContainer = () => {\n        const projectContainer = document.createElement('div');\n        projectContainer.classList.add('project-container');\n\n        projectContainer.innerHTML = `\n            <h2 class=\"project-list-title\">私のリスト</h2>\n            <ul class=\"project-list\" data-projects>\n            \n            </ul>\n            \n            <form action=\"\" data-new-project-form>\n                <input \n                    type=\"text\" \n                    class=\"new project\"\n                    maxlength=\"22\"\n                    data-new-project-input\n                    placeholder=\"新しいプロジェクト名\"\n                    aria-label=\"new project name\"\n                />\n                <button class=\"btn create\" aria-label=\"create new project\"><i class=\"fas fa-folder-plus\"></i></button>\n            </form>\n        `;\n\n        return projectContainer;\n    }\n\n    const createTodoContainer = () => {\n        const todoContainer = document.createElement('div');\n        todoContainer.classList.add('task-container');\n        todoContainer.setAttribute('data-project-display-container', '');\n\n        todoContainer.innerHTML = `\n            <div class=\"todo-header\">\n                <h2 class=\"project-title\" data-project-title></h2>\n                <div class=\"counter-container\">\n                    <p class=\"task-counter\" data-project-counter></p>\n                    <span class=\"triangle\"></span>\n                </div>\n            </div>\n\n            <div class=\"todo-body\">\n                <div class=\"tasks\" data-tasks>\n                \n                </div>\n\n                <div class=\"new-task-creator\">\n                    <form action=\"\" data-new-task-form>\n                        <input \n                            type=\"text\" \n                            data-new-task-input\n                            maxlength=\"40\"\n                            class=\"new task\"\n                            placeholder=\"新しいタスク名\"\n                            aria-label=\"new task name\"\n                        />\n                        <button class=\"btn create create-task\" aria-label=\"create new task\"><i class=\"fas fa-plus\"></i></button>\n                    </form>\n                </div>\n\n            </div>\n\n            <div class=\"delete-stuff\">\n                <button class=\"btn delete\" data-clear-complete-tasks-button><i class=\"fas fa-tasks\"></i> Clear completed tasks</button>\n                <button class=\"btn delete\" data-delete-project-button><i class=\"fa fa-minus-square\"></i> Delete project</button>\n            </div>\n\n            <template id=\"task-template\">\n                <div class=\"task\">\n                    <input\n                        data-input=\"input\"\n                        type=\"checkbox\" />\n                    <label>\n                        <span class=\"custom-checkbox\"></span>\n                        <p></p>\n                    </label>\n                    <button class=\"btn edit\" data-edit-task=\"edit\"><i class=\"fas fa-pencil-alt\"></i></button>\n                    <div class=\"edit-container hidden\" data-edit-task-container>\n                        \n                        <button class=\"btn validate\" data-validate-edit-task=\"validate\"><i class=\"fas fa-check\"></i></button>\n                        <input type=\"text\" maxlength=\"40\" data-edit-task-input>\n                        <!--<textarea rows=\"1\" cols=\"20\" maxlength=\"20\" data-edit-task-input>-->\n                        \n                    </div>\n                </div>\n            </template>\n        `;\n        return todoContainer;\n    }\n\n    const createLayout = () => {\n        const content = document.getElementById('content');\n\n        content.append(createHeader(), createProjectContainer(), createTodoContainer());\n    }\n\n    return {\n        createLayout\n    };\n})();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (initializeDOM);\n\n//# sourceURL=webpack://todo-list/./src/layout.js?");

/***/ }),

/***/ "./src/project.js":
/*!************************!*\
  !*** ./src/project.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass Project {\n    constructor(projectData) {\n        this._id = projectData.id;\n        this._name = projectData.name;\n        this._tasks = projectData.tasks || [];\n    }\n\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value;\n    }\n\n    get name() {\n        return this._name;\n    }\n    set name(value) {\n        this._name = value.toString();\n    }\n\n    get tasks() {\n        return this._tasks;\n    }\n    set tasks(value) {\n        this._tasks = value;\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Project);\n\n//# sourceURL=webpack://todo-list/./src/project.js?");

/***/ }),

/***/ "./src/task.js":
/*!*********************!*\
  !*** ./src/task.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass Task {\n    constructor(taskData) {\n        this._id = taskData.id;\n        this._title = taskData.title;\n        //this._dueDate = taskData.dueDate;\n        //this._priority = taskData.priority;\n        this._complete = taskData.complete || false;\n    }\n\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value;\n    } \n\n    get title() {\n        return this._title;\n    }\n    set title(value) {\n        this._title = value.toString();\n    }  \n\n    get complete() {\n        return this._complete;\n    }\n    set complete(value) {\n        (value) ? this._complete = true : this._complete = false;\n    }\n\n    // get dueDate() {\n    //     return this._dueDate;\n    // }\n    // get priority() {\n    //     return this._priority;\n    // }\n\n    // set dueDate(value) {\n    //     if (value < dateStuff.getTodayDate()) {\n    //         alert('Since the date is already passed, default value of today = ' + dateStuff.getTodayDate() + '!');\n    //         value = dateStuff.getTodayDate();\n    //         this._dueDate = value;\n    //     } else {\n    //         this._dueDate = value;\n    //     }\n    // }\n\n    // set priority(value) {\n    //     this._priority = value.toString();\n    // }\n    \n    toggleComplete() {\n        this._complete = !this._complete; \n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Task);\n\n//# sourceURL=webpack://todo-list/./src/task.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;